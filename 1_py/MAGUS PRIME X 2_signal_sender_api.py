import logging
import os

import requests
from dotenv import load_dotenv
from flask import Flask, jsonify, request

# Setup logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger("SignalSenderAPI")

# Load environment variables
load_dotenv()

# Initialize Flask app
app = Flask(__name__)


@app.route("/send-signal", methods=["POST"])
def send_signal():
    """Endpoint to receive trading signals and forward them to Telegram"""
    # Get data from request
    data = request.json
    logger.info(f"Received signal request with data: {data}")

    # Validate required fields
    required_fields = ["pair", "entry", "stop_loss", "tp1", "tp2", "tp3"]
    missing_fields = [field for field in required_fields if field not in data]

    if missing_fields:
        error_msg = f"Missing required fields: {', '.join(missing_fields)}"
        logger.error(error_msg)
        return jsonify({"error": error_msg}), 400

    # Get values from request
    pair = data.get("pair")
    entry = data.get("entry")
    stop_loss = data.get("stop_loss")
    tp1 = data.get("tp1")
    tp2 = data.get("tp2")
    tp3 = data.get("tp3")
    timeframe = data.get("timeframe", "30m")
    mode = data.get("mode", "SAFE_RECOVERY")
    signal_type = data.get("type", "Breakout")

    # Get Telegram credentials
    bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
    chat_id = os.environ.get("TELEGRAM_CHAT_ID")

    if not bot_token or not chat_id:
        error_msg = "Telegram credentials not found in environment variables"
        logger.error(error_msg)
        return jsonify({"error": error_msg}), 500

    # Format message with HTML
    message = f"""
ðŸš¨ <b>TRADING SIGNAL</b> ðŸš¨

ðŸ”¹ <b>Pair:</b> {pair}
ðŸ”¹ <b>Type:</b> {signal_type}
ðŸ”¹ <b>Timeframe:</b> {timeframe}
ðŸ”¹ <b>Mode:</b> {mode}

ðŸ’° <b>Entry:</b> {entry}
ðŸ›‘ <b>Stop Loss:</b> {stop_loss}
âœ… <b>TP1:</b> {tp1}
âœ… <b>TP2:</b> {tp2}
âœ… <b>TP3:</b> {tp3}

Generated by Magus Prime X
"""

    # Send to Telegram
    telegram_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML",  # Using HTML instead of Markdown or MarkdownV2
    }

    try:
        logger.info(f"Sending message to Telegram: {telegram_url}")
        response = requests.post(telegram_url, json=payload, timeout=10)
        result = response.json()

        if result.get("ok"):
            logger.info("Successfully sent message to Telegram")
            return (
                jsonify({"success": True, "message": "Signal sent successfully"}),
                200,
            )
        else:
            logger.error(f"Telegram API error: {result}")
            return jsonify({"error": result}), 200
    except Exception as e:
        logger.error(f"Error sending message to Telegram: {str(e)}")
        return jsonify({"error": str(e)}), 500


@app.route("/")
def index():
    """Root endpoint to provide basic information"""
    return jsonify(
        {
            "name": "Signal Sender API",
            "version": "1.0.0",
            "endpoints": [
                {
                    "path": "/send-signal",
                    "method": "POST",
                    "description": "Send a trading signal to Telegram",
                }
            ],
        }
    )


if __name__ == "__main__":
    port = int(os.environ.get("SIGNAL_SENDER_PORT", 8080))
    logger.info(f"Starting Signal Sender API on port {port}")
    app.run(host="0.0.0.0", port=port, debug=True)
