import os

import requests
from dotenv import load_dotenv


def send_telegram_signal_directly(
    pair, entry, stop_loss, tp1, tp2, tp3, timeframe, mode, signal_type
):
    """
    Bypass the API server and send a trading signal directly to Telegram.
    This helps identify if the issue is with your API server or with Telegram.
    """
    # Load environment variables
    load_dotenv()

    # Get Telegram credentials
    bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
    chat_id = os.environ.get("TELEGRAM_CHAT_ID")

    if not bot_token or not chat_id:
        print("❌ Error: Missing Telegram credentials in environment variables")
        return False

    # Format the signal message - using HTML mode instead of Markdown to avoid escaping issues
    message = f"""
🚨 <b>TRADING SIGNAL</b> 🚨

🔹 <b>Pair:</b> {pair}
🔹 <b>Type:</b> {signal_type}
🔹 <b>Timeframe:</b> {timeframe}
🔹 <b>Mode:</b> {mode}

💰 <b>Entry:</b> {entry}
🛑 <b>Stop Loss:</b> {stop_loss}
✅ <b>TP1:</b> {tp1}
✅ <b>TP2:</b> {tp2}
✅ <b>TP3:</b> {tp3}

Generated by Magus Prime X
    """

    # Send to Telegram
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML",  # Using HTML instead of Markdown or MarkdownV2
    }

    print(
        f"Sending directly to Telegram using bot token: {bot_token[:4]}...{bot_token[-4:]}"
    )
    print(f"Chat ID: {chat_id}")

    try:
        response = requests.post(url, json=payload, timeout=10)
        result = response.json()

        if result.get("ok"):
            print("✅ Successfully sent message directly to Telegram!")
            print(f"Message ID: {result.get('result', {}).get('message_id')}")
            return True
        else:
            print(f"❌ Telegram API error: {result.get('description')}")
            return False
    except Exception as e:
        print(f"❌ Error sending message: {e}")
        return False


if __name__ == "__main__":
    print("🔄 Bypassing API server and sending signal directly to Telegram...")

    # Use the same test data that signal_sender.py uses
    send_telegram_signal_directly(
        pair="GOLD",
        entry=3110,
        stop_loss=3100,
        tp1=3120,
        tp2=3135,
        tp3=3150,
        timeframe="30m",
        mode="SAFE_RECOVERY",
        signal_type="Breakout",
    )

    print("\n📝 API SERVER INTEGRATION TIPS:")
    print(
        " "
If the direct message worked but your AP + "I server still fails, the issue is with  + "your API server."
    )
    print("Make sure your API server:")
    print("1. Loads environment variables from the .env file")
    print("2. Uses the correct variable names: TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID")
    print("3. Properly formats the message with HTML instead of Markdown")
    print("4. Handles any errors from the Telegram API")

    print("\nAdd this code to your API server implementation:")
    print(
        """
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Get Telegram credentials
bot_token = os.environ.get("TELEGRAM_BOT_TOKEN")
chat_id = os.environ.get("TELEGRAM_CHAT_ID")

# Message formatting
message = f\"\"\"
🚨 <b>TRADING SIGNAL</b> 🚨
...your signal details...
\"\"\"

# Telegram API call
payload = {
    "chat_id": chat_id,
    "text": message,
    "parse_mode": "HTML"  # Use HTML instead of Markdown
}
    """
    )
